<?php
// $Id$

/**
 * @file
 * Tests for the fivestar_quota module.
 */

class SmartcropTestCase extends DrupalWebTestCase {
  protected $admin_user;

  public static function getInfo() {
    return array(
      'name' => t('Smartcrop test'),
      'description' => t('Test Smartcrop.'),
      'group' => t('Imagecache'),
    );
  }

  function setUp() {
    parent::setUp('smartcrop', 'imagecache', 'imagecache_ui', 'imageapi', 'imageapi_gd', 'upload');

    // Menu router must be rebuilt because imagecache_menu() is called before $conf['file_directory_path'] is set.
    // Fix in progress at http://drupal.org/node/654752
    menu_router_build(TRUE);

    // Create and login user
    $this->admin_user = $this->drupalCreateUser(array('access administration pages', 'administer imagecache', 'administer nodes', 'upload files', 'view uploaded files'));
    $this->drupalLogin($this->admin_user);
  }

  /**
   * Verify the entropy calculation with a known image.
   */
  function testEntropy() {
    // Create a test image with 3 red, 3 green, and 3 blue pixels.
    $image = imagecreatetruecolor(3, 3);
    imagefilledrectangle($image, 0, 0, 2, 0, imagecolorallocate($image, 255, 0, 0));
    imagefilledrectangle($image, 0, 1, 2, 1, imagecolorallocate($image, 0, 255, 0));
    imagefilledrectangle($image, 0, 2, 2, 2, imagecolorallocate($image, 0, 0, 255));

    // Calculate the expected values.
    // There are 9 bins in the histogram, 3 colors * 3 channels.
    $expected_entroy = (1/3 * log(1/9, 2) + 2/3 * log(2/9, 2)) * -1;
    $image_entropy = _smartcrop_gd_entropy($image);

    $this->assertTrue($image_entropy - $expected_entroy < .001, t('Entropy value is correct.'));
  }

  /**
   * Test cropping of images with known properties.
   */
  function testCrop() {
    // Create a preset with entropy crop.
    $this->drupalPost('admin/build/imagecache/add', array('presetname' => 'test'), t('Save Preset'));
    $this->clickLink(t('Add !action', array('!action' => 'Smart Crop')));
    $edit = array(
      'data[width]' => 10,
      'data[height]' => 10,
    );
    $this->drupalPost(NULL, $edit, t('Create Action'));

    // Test cropping with synthetic images.
    $test_files = array('bottom.png', 'left.png', 'right.png', 'top.png');
    $result_hash = $this->imageHash(dirname(__FILE__) . '/center.png');
    foreach ($test_files as $file) {
      // Upload a file
      $edit = array(
        'title' => $this->randomName(),
        'files[upload]' => realpath(dirname(__FILE__) . '/' . $file),
      );
      $this->drupalPost('node/add/page', $edit, t('Save'));
      $this->drupalGet(file_create_url('imagecache/test/' . $file));
      $this->assertResponse(200, t('Retrieved cropped image.'));
      $image_hash = $this->imageHash(file_create_url('imagecache/test/' . $file));
      $this->assertEqual($result_hash,
        $image_hash,
        t('@file was cropped correctly.', array('@file' => $file))
      );
    }

    // Test Upscaling.
    $this->drupalGet('admin/build/imagecache');
    $this->clickLink('test');
    $this->clickLink('Configure');
    $edit = array(
      'data[width]' => 100,
      'data[height]' => 100,
      'data[upscale]' => 1,
    );
    $this->drupalPost(NULL, $edit, t('Update Action'));

    $file = 'center.png';
    $edit = array(
      'title' => $this->randomName(),
      'files[upload]' => realpath(dirname(__FILE__) . '/' . $file),
    );
    $this->drupalPost('node/add/page', $edit, t('Save'));
    $this->drupalGet(file_create_url('imagecache/test/' . $file));
    $this->assertResponse(200, t('Retrieved cropped image.'));

    $image = imagecreatefrompng(file_create_url('imagecache/test/' . $file));
    $this->assertEqual(100, imagesx($image), t('Image was upscaled correctly.'));
    $this->assertEqual(100, imagesy($image), t('Image was upscaled correctly.'));

    // Test percentage units.
    $this->drupalGet('admin/build/imagecache');
    $this->clickLink('test');
    $this->clickLink('Configure');
    $edit = array(
      'data[width]' => '200%',
      'data[height]' => '200%',
      'data[upscale]' => 1,
    );
    $this->drupalPost(NULL, $edit, t('Update Action'));
    $file = 'center.png';
    $edit = array(
      'title' => $this->randomName(),
      'files[upload]' => realpath(dirname(__FILE__) . '/' . $file),
    );
    $this->drupalPost('node/add/page', $edit, t('Save'));
    $this->drupalGet(file_create_url('imagecache/test/center_0.png'));
    $this->assertResponse(200, t('Retrieved cropped image.'));

    $image = imagecreatefrompng(file_create_url('imagecache/test/center_0.png'));
    $this->assertEqual(20, imagesx($image), t('Image was upscaled correctly.'));
    $this->assertEqual(20, imagesy($image), t('Image was upscaled correctly.'));
  }

  /**
   * Compute a hash of image data.
   * @param $image_file Path to an image file.
   * @return string hash of image data.
   */
  function imageHash($image_file) {
    $image = imagecreatefrompng($image_file);
    $data = '';
    for ($i = 0; $i < imagesx($image); $i++) {
      for ($j = 0; $j < imagesy($image); $j++) {
        $data .= imagecolorat($image, $i, $j);
      }
    }
    imagedestroy($image);
    return hash('sha256', $data);
  }
}